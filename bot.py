import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8250247525:AAFIixru3WzZGxdPoQ-e35PvegpPSGzzn7s"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    tags TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS note_links (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_note_id INTEGER NOT NULL,
                    to_note_id INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (from_note_id) REFERENCES notes (id),
                    FOREIGN KEY (to_note_id) REFERENCES notes (id)
                )
            ''')
            
            conn.commit()
    
    def add_note(self, user_id, title, content, tags=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO notes (user_id, title, content, tags)
                VALUES (?, ?, ?, ?)
            ''', (user_id, title, content, tags))
            conn.commit()
            return cursor.lastrowid
    
    def get_user_notes(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, content, tags, created_at 
                FROM notes 
                WHERE user_id = ? 
                ORDER BY created_at DESC
            ''', (user_id,))
            return cursor.fetchall()
    
    def get_note(self, note_id, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, user_id, title, content, tags, created_at 
                FROM notes 
                WHERE id = ? AND user_id = ?
            ''', (note_id, user_id))
            return cursor.fetchone()
    
    def search_notes(self, user_id, query):
        """–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            search_pattern = f'%{query}%'
            cursor.execute('''
                SELECT id, title, content, tags 
                FROM notes 
                WHERE user_id = ? 
                AND (title LIKE ? OR content LIKE ? OR tags LIKE ?)
                ORDER BY created_at DESC
            ''', (user_id, search_pattern, search_pattern, search_pattern))
            return cursor.fetchall()
    
    def add_link(self, from_note_id, to_note_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO note_links (from_note_id, to_note_id)
                VALUES (?, ?)
            ''', (from_note_id, to_note_id))
            conn.commit()
    
    def get_linked_notes(self, note_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT n.id, n.title 
                FROM notes n
                JOIN note_links nl ON n.id = nl.to_note_id
                WHERE nl.from_note_id = ?
                UNION
                SELECT n.id, n.title 
                FROM notes n
                JOIN note_links nl ON n.id = nl.from_note_id
                WHERE nl.to_note_id = ?
            ''', (note_id, note_id))
            return cursor.fetchall()
    
    def delete_note(self, note_id, user_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
            cursor.execute('''
                DELETE FROM note_links 
                WHERE from_note_id = ? OR to_note_id = ?
            ''', (note_id, note_id))
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
            cursor.execute('''
                DELETE FROM notes 
                WHERE id = ? AND user_id = ?
            ''', (note_id, user_id))
            conn.commit()
            return cursor.rowcount > 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('zettelkasten.db')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"),
        KeyboardButton("üìö –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"),
        KeyboardButton("üîç –ü–æ–∏—Å–∫"),
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        KeyboardButton("‚ö° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã")
    )
    return keyboard

def create_commands_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("/new"),
        KeyboardButton("/notes"), 
        KeyboardButton("/search"),
        KeyboardButton("/help"),
        KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def send_notes_list(chat_id, user_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        notes = db.get_user_notes(user_id)

        if not notes:
            text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ /new"
            if message_id:
                bot.edit_message_text(
                    text,
                    chat_id,
                    message_id,
                    reply_markup=create_main_keyboard()
                )
            else:
                bot.send_message(
                    chat_id,
                    text,
                    reply_markup=create_main_keyboard()
            )
            return

        keyboard = InlineKeyboardMarkup()
        for note in notes:
            note_id = note[0]
            title = note[1]
            created_at = note[4] if len(note) > 4 else note[2]  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            display_title = title[:30] + "..." if len(title) > 30 else title
            date_str = created_at[:10] if created_at else "???"
            keyboard.add(InlineKeyboardButton(
                f"üìÑ {display_title} ({date_str})",
                callback_data=f"view_note_{note_id}"
            ))

        text = f"üìö –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(notes)}):\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        if message_id:
            bot.edit_message_text(
                text,
                chat_id,
                message_id,
                reply_markup=keyboard
            )
        else:
            bot.send_message(
                chat_id,
                text,
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫."
        if message_id:
            bot.edit_message_text(
                error_text,
                chat_id,
                message_id,
                reply_markup=create_main_keyboard()
            )
        else:
            bot.send_message(
                chat_id,
                error_text,
                reply_markup=create_main_keyboard()
            )

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zettelkasten Bot!

Zettelkasten ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–µ–¥–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è –∏–¥–µ—è —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º!

üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/search - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º
/help - –ü–æ–º–æ—â—å

üí° –ü—Ä–∏–Ω—Ü–∏–ø—ã Zettelkasten:
‚Ä¢ –ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å: –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ = –æ–¥–Ω–∞ –∏–¥–µ—è
‚Ä¢ –°–≤—è–∑–Ω–æ—Å—Ç—å: –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏
‚Ä¢ –ù–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å: –∏–¥–µ–∏ –æ–±—Ä–∞–∑—É—é—Ç —Å–µ—Ç—å
    """
    bot.send_message(
        message.chat.id, 
        welcome_text,
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ Zettelkasten Bot:

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/notes - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º

üîπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:
1. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–æ–¥–Ω–∞ –∏–¥–µ—è = –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞)
2. –°–≤—è–∑—ã–≤–∞–π—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
4. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏

üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–æ–π:
–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–º–µ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:
‚Ä¢ üîó –°–≤—è–∑–∞—Ç—å - —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å —Å –¥—Ä—É–≥–æ–π –∑–∞–º–µ—Ç–∫–æ–π
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
‚Ä¢ üìã –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º!
    """
    bot.send_message(
        message.chat.id, 
        help_text,
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['new'])
def new_note_command(message):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    user_states[message.chat.id] = {'state': 'waiting_title'}
    bot.send_message(
        message.chat.id,
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    )

@bot.message_handler(commands=['notes'])
def list_notes_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    send_notes_list(message.chat.id, message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", "üìö –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "üîç –ü–æ–∏—Å–∫", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ö° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –û—Ç–º–µ–Ω–∞"])
def handle_main_menu_buttons(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if message.text == "üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞":
        new_note_command(message)
    elif message.text == "üìö –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏":
        list_notes_command(message)
    elif message.text == "üîç –ü–æ–∏—Å–∫":
        bot.send_message(
            message.chat.id,
            "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        )
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_command(message)
    elif message.text == "‚ö° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã":
        bot.send_message(
            message.chat.id,
            "‚ö° –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üìù /new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É\n"
            "üìö /notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
            "üîç /search - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º\n"
            "‚ÑπÔ∏è /help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "üè† /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_commands_keyboard()
        )
    elif message.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(
            message.chat.id,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_main_keyboard()
        )
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        if message.chat.id in user_states:
            del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=create_main_keyboard()
        )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data

    try:
        if data.startswith("view_note_"):
            note_id = int(data.split("_")[2])
            show_note_detail(chat_id, message_id, note_id, user_id)

        elif data.startswith("link_note_"):
            note_id = int(data.split("_")[2])
            start_linking(chat_id, message_id, note_id, user_id)

        elif data.startswith("create_link_"):
            parts = data.split("_")
            from_note_id = int(parts[2])
            to_note_id = int(parts[3])
            db.add_link(from_note_id, to_note_id)
            bot.edit_message_text(
                "‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!",
                chat_id,
                message_id
            )

        elif data.startswith("delete_note_"):
            note_id = int(data.split("_")[2])
            if db.delete_note(note_id, user_id):
                bot.edit_message_text(
                    "üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                    chat_id,
                    message_id
                )
            else:
                bot.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.",
                    chat_id,
                    message_id
                )

        elif data == "back_to_notes":
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
            send_notes_list(chat_id, user_id, message_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

def show_note_detail(chat_id, message_id, note_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        note = db.get_note(note_id, user_id)

        if not note:
            bot.edit_message_text(
                "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                chat_id,
                message_id
            )
            return

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        note_id = note[0]
        title = note[2]
        content = note[3]
        tags = note[4]
        created_at = note[5]

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        linked_notes = db.get_linked_notes(note_id)

        text = f"""üìÑ <b>{title}</b>

{content}

üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags if tags else "–Ω–µ—Ç"}
üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_at[:16]}
üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:</b> {len(linked_notes)}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∞—Ö
        if linked_notes:
            text += "\n\n<b>–°–≤—è–∑–∏:</b>\n"
            for linked_note in linked_notes:
                linked_title = linked_note[1]
                text += f"‚Ä¢ {linked_title}\n"

        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å", callback_data=f"link_note_{note_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note_{note_id}")
        )
        keyboard.row(InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_notes"))

        bot.edit_message_text(
            text,
            chat_id,
            message_id,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–µ—Ç–∫–∏: {e}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–∫–∏.",
            chat_id,
            message_id
        )

def start_linking(chat_id, message_id, from_note_id, user_id):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
    try:
        notes = db.get_user_notes(user_id)

        if len(notes) < 2:
            bot.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.",
                chat_id,
                message_id
            )
            return

        keyboard = InlineKeyboardMarkup()
        for note in notes:
            note_id = note[0]
            title = note[1]
            if note_id != from_note_id:
                display_title = title[:30] + "..." if len(title) > 30 else title
                keyboard.add(InlineKeyboardButton(
                    f"üîó {display_title}",
                    callback_data=f"create_link_{from_note_id}_{note_id}"
                ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_note_{from_note_id}"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:",
            chat_id,
            message_id,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: {e}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.",
            chat_id,
            message_id
        )

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_states:
        state = user_states[chat_id]['state']
        
        if state == 'waiting_title':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            user_states[chat_id] = {
                'state': 'waiting_content',
                'title': message.text
            }
            bot.send_message(
                chat_id, 
                "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:",
                reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            )
            
        elif state == 'waiting_content':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–≥–∏
            user_states[chat_id] = {
                'state': 'waiting_tags',
                'title': user_states[chat_id]['title'],
                'content': message.text
            }
            bot.send_message(
                chat_id,
                "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, python, –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
                reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            )
            
        elif state == 'waiting_tags':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É
            try:
                tags = message.text.strip()
                note_id = db.add_note(
                    user_id=user_id,
                    title=user_states[chat_id]['title'],
                    content=user_states[chat_id]['content'],
                    tags=tags if tags else None
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del user_states[chat_id]
                
                bot.send_message(
                    chat_id,
                    f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! (ID: {note_id})\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏: /notes\n"
                    f"‚Ä¢ –°–≤—è–∑–∞—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É —Å –¥—Ä—É–≥–∏–º–∏\n"
                    f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é: /new",
                    reply_markup=create_main_keyboard()
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
                del user_states[chat_id]
                bot.send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=create_main_keyboard()
                )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        bot.send_message(
            chat_id,
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!",
            reply_markup=create_main_keyboard()
        )

if __name__ == "__main__":
    logger.info("ü§ñ Zettelkasten Bot –∑–∞–ø—É—â–µ–Ω...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    bot.infinity_polling()