import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes,
    ConversationHandler, filters
)

from config import BOT_TOKEN
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, CONTENT, TAGS, LINK_NOTES = range(4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('zettelkasten.db')


class ZettelBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("notes", self.list_notes))
        self.application.add_handler(CommandHandler("search", self.search_notes))

        # Conversation –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        create_note_conv = ConversationHandler(
            entry_points=[CommandHandler("new", self.new_note)],
            states={
                TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_title)],
                CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_content)],
                TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_tags)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )
        self.application.add_handler(create_note_conv)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zettelkasten Bot!

Zettelkasten ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–µ–¥–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è –∏–¥–µ—è —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/search - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –∑–∞–º–µ—Ç–∫–∏!
        """
        await update.message.reply_text(welcome_text)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ Zettelkasten Bot:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
/search - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–æ–¥–Ω–∞ –∏–¥–µ—è = –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞)
2. –°–≤—è–∑—ã–≤–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
4. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏

–ü—Ä–∏–Ω—Ü–∏–ø—ã Zettelkasten:
- –ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å: –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ = –æ–¥–Ω–∞ –∏–¥–µ—è
- –°–≤—è–∑–Ω–æ—Å—Ç—å: –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏
- –ù–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å: –∏–¥–µ–∏ –æ–±—Ä–∞–∑—É—é—Ç —Å–µ—Ç—å, –∞ –Ω–µ –∏–µ—Ä–∞—Ä—Ö–∏—é
        """
        await update.message.reply_text(help_text)

    async def new_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        await update.message.reply_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:"
        )
        return TITLE

    async def get_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏"""
        context.user_data['title'] = update.message.text
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:"
        )
        return CONTENT

    async def get_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        context.user_data['content'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
        )
        return TAGS

    async def get_tags(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        tags = update.message.text
        user_id = update.message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É
        note_id = db.add_note(
            user_id=user_id,
            title=context.user_data['title'],
            content=context.user_data['content'],
            tags=tags
        )

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()

        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! (ID: {note_id})\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É —Å –¥—Ä—É–≥–∏–º–∏ —á–µ—Ä–µ–∑ /notes"
        )
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        context.user_data.clear()
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    async def list_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        notes = db.get_user_notes(user_id)

        if not notes:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ /new")
            return

        keyboard = []
        for note_id, title, created_at in notes:
            keyboard.append([InlineKeyboardButton(
                f"üìÑ {title} ({created_at[:10]})",
                callback_data=f"view_note_{note_id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üìö –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def search_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º"""
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n"
                "–ü—Ä–∏–º–µ—Ä: /search –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )
            return

        query = " ".join(context.args)
        user_id = update.message.from_user.id
        notes = db.search_notes(user_id, query)

        if not notes:
            await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        keyboard = []
        for note_id, title, content, tags in notes:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
            short_content = content[:30] + "..." if len(content) > 30 else content
            keyboard.append([InlineKeyboardButton(
                f"üîç {title}: {short_content}",
                callback_data=f"view_note_{note_id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'",
            reply_markup=reply_markup
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data
        user_id = query.from_user.id

        if data.startswith("view_note_"):
            note_id = int(data.split("_")[2])
            await self.show_note_detail(query, note_id, user_id)

        elif data.startswith("link_note_"):
            note_id = int(data.split("_")[2])
            await self.start_linking(query, note_id, user_id)

        elif data.startswith("create_link_"):
            parts = data.split("_")
            from_note_id = int(parts[2])
            to_note_id = int(parts[3])
            db.add_link(from_note_id, to_note_id)
            await query.edit_message_text("‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!")

    async def show_note_detail(self, query, note_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        note = db.get_note(note_id, user_id)

        if not note:
            await query.edit_message_text("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        note_id, user_id, title, content, tags, created_at, parent_id = note

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        linked_notes = db.get_linked_notes(note_id)

        text = f"""
üìÑ **{title}**

{content}

üè∑Ô∏è –¢–µ–≥–∏: {tags if tags else "–Ω–µ—Ç"}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at[:16]}
üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {len(linked_notes)}
        """

        keyboard = [
            [InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å —Å –¥—Ä—É–≥–æ–π –∑–∞–º–µ—Ç–∫–æ–π", callback_data=f"link_note_{note_id}")],
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        if linked_notes:
            text += "\n\n–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n"
            for linked_id, linked_title in linked_notes:
                text += f"‚Ä¢ {linked_title}\n"

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)

    async def start_linking(self, query, from_note_id, user_id):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
        notes = db.get_user_notes(user_id)

        if len(notes) < 2:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.")
            return

        keyboard = []
        for note_id, title, created_at in notes:
            if note_id != from_note_id:
                keyboard.append([InlineKeyboardButton(
                    f"üîó {title}",
                    callback_data=f"create_link_{from_note_id}_{note_id}"
                )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def echo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/new - –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞\n"
            "/notes - –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "/search - –ü–æ–∏—Å–∫"
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()


if __name__ == "__main__":
    bot = ZettelBot(8250247525:AAEKhwC9bU1LQwDUZsNhBLhdMka6P9ofgGQ)
    bot.run()